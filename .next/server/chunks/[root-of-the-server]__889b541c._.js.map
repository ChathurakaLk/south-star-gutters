{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/chathuraka%202025/south-star-gutters/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nconst uri = process.env.MONGODB_URI as string;\r\nconst options = {};\r\n\r\nlet client: MongoClient;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error(\"Please add your MongoDB URI to .env.local as MONGODB_URI\");\r\n}\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  if (!(global as any)._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    (global as any)._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = (global as any)._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\nexport default clientPromise;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,AAAC,OAAe,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC7B,OAAe,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,AAAC,OAAe,mBAAmB;AACrD,OAAO;;AAIP;uCAEe","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///D:/chathuraka%202025/south-star-gutters/app/api/mongo-test/route.ts"],"sourcesContent":["import clientPromise from \"@/lib/mongodb\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const client = await clientPromise;\r\n    const dbs = await client.db().admin().listDatabases();\r\n    return NextResponse.json({ ok: true, databases: dbs.databases });\r\n  } catch (error: any) {\r\n    return NextResponse.json({ ok: false, error: error.message }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,gHAAA,CAAA,UAAa;QAClC,MAAM,MAAM,MAAM,OAAO,EAAE,GAAG,KAAK,GAAG,aAAa;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;YAAM,WAAW,IAAI,SAAS;QAAC;IAChE,EAAE,OAAO,OAAY;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;YAAO,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC9E;AACF","debugId":null}}]
}